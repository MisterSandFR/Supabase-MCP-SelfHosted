# Smithery configuration file: https://smithery.ai/docs/build/project-config
# Enhanced Security Edition of Self-Hosted Supabase MCP Server

name: selfhosted-supabase-mcp
version: 2.0.0
description: |
  ðŸ”’ Enhanced security edition of Self-Hosted Supabase MCP Server with comprehensive security 
  improvements including SQL injection prevention, strong authentication, rate limiting, 
  and production-ready features. Perfect for self-hosted Supabase instances in Docker/Coolify.

author: MisterSandFR
license: MIT
homepage: https://github.com/MisterSandFR/selfhosted-supabase-mcp

tags:
  - supabase
  - postgresql
  - database
  - security
  - self-hosted
  - docker
  - authentication
  - rate-limiting
  - sql

startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    required:
      - supabaseUrl
      - supabaseAnonKey
    properties:
      supabaseUrl:
        type: string
        description: Self-hosted Supabase HTTP(S) URL (e.g., http://localhost:8000)
        examples: ["http://localhost:8000", "https://your-supabase.com"]
      supabaseAnonKey:
        type: string
        description: Supabase anonymous key (starts with eyJ...)
        sensitive: true
      supabaseServiceRoleKey:
        type: string
        description: Service role key for privileged operations (optional but recommended)
        sensitive: true
      databaseUrl:
        type: string
        description: Direct PostgreSQL connection string (highly recommended for production)
        examples: ["postgresql://postgres:password@localhost:5432/postgres"]
        sensitive: true
      supabaseAuthJwtSecret:
        type: string
        description: JWT secret for token verification (optional)
        sensitive: true
      toolsConfig:
        type: string
        description: Path to JSON file for tool whitelisting (optional)
        examples: ["./mcp-tools.json"]
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
    |-
    (config) => {
      const args = [
        'dist/index.js',
        '--url', config.supabaseUrl,
        '--anon-key', config.supabaseAnonKey
      ];
      if (config.supabaseServiceRoleKey) {
        args.push('--service-key', config.supabaseServiceRoleKey);
      }
      if (config.databaseUrl) {
        args.push('--db-url', config.databaseUrl);
      }
      if (config.supabaseAuthJwtSecret) {
        args.push('--jwt-secret', config.supabaseAuthJwtSecret);
      }
      if (config.toolsConfig) {
        args.push('--tools-config', config.toolsConfig);
      }
      return { command: 'node', args };
    }
  exampleConfig:
    supabaseUrl: http://localhost:8000
    supabaseAnonKey: example-anon-key
    supabaseServiceRoleKey: example-service-key
    databaseUrl: postgresql://postgres:password@localhost:5432/postgres
    supabaseAuthJwtSecret: example-jwt-secret
    toolsConfig: ./mcp-tools.json
