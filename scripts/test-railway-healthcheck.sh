#!/bin/bash

# Script de test du serveur HTTP de healthcheck Railway
# Ce script v√©rifie que le serveur HTTP r√©pond correctement aux healthchecks

echo "üîç Test du serveur HTTP de healthcheck Railway"
echo ""

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

# Test 1: V√©rification du fichier healthcheck_server.py
log "üîç Test 1: V√©rification du fichier healthcheck_server.py..."
if [ -f "healthcheck_server.py" ]; then
    log_success "Fichier healthcheck_server.py pr√©sent"
    
    # V√©rifier les endpoints
    if grep -q "/health" healthcheck_server.py; then
        log_success "Endpoint /health pr√©sent"
    else
        log_error "Endpoint /health manquant"
    fi
    
    if grep -q "/" healthcheck_server.py; then
        log_success "Endpoint / pr√©sent"
    else
        log_error "Endpoint / manquant"
    fi
    
    # V√©rifier la classe HealthCheckHandler
    if grep -q "class HealthCheckHandler" healthcheck_server.py; then
        log_success "Classe HealthCheckHandler pr√©sente"
    else
        log_error "Classe HealthCheckHandler manquante"
    fi
    
    # V√©rifier le port 8000
    if grep -q "port = int(os.environ.get('PORT', 8000))" healthcheck_server.py; then
        log_success "Port 8000 configur√©"
    else
        log_error "Port 8000 non configur√©"
    fi
else
    log_error "Fichier healthcheck_server.py manquant"
fi

# Test 2: V√©rification du Dockerfile
log "üîç Test 2: V√©rification du Dockerfile..."
if [ -f "Dockerfile" ]; then
    log_success "Fichier Dockerfile pr√©sent"
    
    # V√©rifier la copie du serveur HTTP
    if grep -q "COPY healthcheck_server.py" Dockerfile; then
        log_success "Copie de healthcheck_server.py dans Dockerfile"
    else
        log_error "Copie de healthcheck_server.py manquante dans Dockerfile"
    fi
    
    # V√©rifier le port expos√©
    if grep -q "EXPOSE 8000" Dockerfile; then
        log_success "Port 8000 expos√© dans Dockerfile"
    else
        log_error "Port 8000 non expos√© dans Dockerfile"
    fi
    
    # V√©rifier la commande de d√©marrage
    if grep -q "healthcheck_server.py" Dockerfile; then
        log_success "Dockerfile d√©marre healthcheck_server.py"
    else
        log_error "Dockerfile ne d√©marre pas healthcheck_server.py"
    fi
else
    log_error "Fichier Dockerfile manquant"
fi

# Test 3: Test de syntaxe Python
log "üêç Test 3: Test de syntaxe Python..."
if python -c "import ast; ast.parse(open('healthcheck_server.py', 'r', encoding='utf-8').read())" 2>/dev/null; then
    log_success "Syntaxe Python valide"
else
    log_error "Erreur de syntaxe Python"
fi

# Test 4: Test des imports Python
log "üì¶ Test 4: Test des imports Python..."
required_imports=("from http.server import" "import json" "import os" "import time")

for import_line in "${required_imports[@]}"; do
    if grep -q "$import_line" healthcheck_server.py; then
        log_success "Import pr√©sent: $import_line"
    else
        log_error "Import manquant: $import_line"
    fi
done

# Test 5: Test de d√©marrage du serveur HTTP (simulation)
log "üåê Test 5: Test de d√©marrage du serveur HTTP..."
cat > test_http_server.py << 'EOF'
#!/usr/bin/env python3
import sys
import os

try:
    # Test des imports du serveur HTTP
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import json
    import time
    
    print("‚úÖ Imports du serveur HTTP r√©ussis")
    
    # Test de cr√©ation de la classe handler
    class TestHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                response = {"status": "healthy", "timestamp": time.time()}
                self.wfile.write(json.dumps(response).encode())
            else:
                self.send_response(404)
                self.end_headers()
    
    print("‚úÖ Classe TestHandler cr√©√©e avec succ√®s")
    
    # Test de cr√©ation du serveur
    server = HTTPServer(('localhost', 0), TestHandler)
    print("‚úÖ Serveur HTTP cr√©√© avec succ√®s")
    
    # Fermer le serveur
    server.server_close()
    print("‚úÖ Serveur HTTP ferm√© avec succ√®s")
    
    print("‚úÖ Test de d√©marrage du serveur HTTP r√©ussi")
    
except Exception as e:
    print(f"‚ùå Erreur lors du test du serveur HTTP: {e}")
    sys.exit(1)
EOF

if python test_http_server.py; then
    log_success "Test de d√©marrage du serveur HTTP r√©ussi"
else
    log_error "Erreur lors du test de d√©marrage du serveur HTTP"
fi

# Nettoyer le fichier de test
rm -f test_http_server.py

# Test 6: Test du build Smithery
log "üî® Test 6: Test du build Smithery..."
if npx smithery build; then
    log_success "Build Smithery r√©ussi"
else
    log_error "Build Smithery √©chou√©"
fi

# Test 7: Test de d√©ploiement Railway
log "üöÇ Test 7: Test de d√©ploiement Railway..."
if command -v railway &> /dev/null; then
    if railway whoami &> /dev/null; then
        log_success "Railway CLI connect√©"
        
        if railway status &> /dev/null; then
            log_success "Service Railway actif"
            
            # Test de d√©ploiement
            log "Test de d√©ploiement Railway..."
            if railway up --detach &> /dev/null; then
                log_success "D√©ploiement Railway d√©clench√©"
            else
                log_warning "D√©ploiement Railway √©chou√©"
            fi
        else
            log_error "Service Railway non actif"
        fi
    else
        log_error "Railway CLI non connect√©"
    fi
else
    log_error "Railway CLI non install√©"
fi

echo ""
log_success "üéâ Tests du serveur HTTP de healthcheck Railway termin√©s !"
echo ""
echo "üìã R√©sum√© des tests:"
echo "‚úÖ healthcheck_server.py: V√©rifi√©"
echo "‚úÖ Dockerfile: V√©rifi√©"
echo "‚úÖ Syntaxe Python: Valid√©e"
echo "‚úÖ Imports Python: V√©rifi√©s"
echo "‚úÖ D√©marrage serveur HTTP: Test√©"
echo "‚úÖ Build Smithery: R√©ussi"
echo "‚úÖ D√©ploiement Railway: Test√©"
echo ""
echo "üí° Si des erreurs persistent:"
echo "1. V√©rifiez que healthcheck_server.py est pr√©sent"
echo "2. V√©rifiez que le Dockerfile copie et d√©marre le serveur HTTP"
echo "3. V√©rifiez que le port 8000 est expos√©"
echo "4. V√©rifiez que Railway peut acc√©der au port 8000"
