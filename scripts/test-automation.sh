#!/bin/bash

# Script de test du syst√®me d'automatisation sans Railway
# Ce script teste toutes les fonctionnalit√©s sauf Railway

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

echo "üß™ Test du Syst√®me d'Automatisation (Sans Railway)"
echo ""

# Test 1: V√©rification des pr√©requis
log "üîç Test 1: V√©rification des pr√©requis..."
if command -v git &> /dev/null; then
    log_success "Git install√©"
else
    log_error "Git non install√©"
    exit 1
fi

if command -v npx &> /dev/null; then
    log_success "npx install√©"
else
    log_error "npx non install√©"
    exit 1
fi

# Test 2: V√©rification de la syntaxe Python
log "üêç Test 2: V√©rification de la syntaxe Python..."
if [ -f "src/supabase_server.py" ]; then
    log_success "Fichier supabase_server.py trouv√©"
    
    # V√©rifier l'encodage UTF-8
    if grep -q "# -*- coding: utf-8 -*-" src/supabase_server.py; then
        log_success "Encodage UTF-8 d√©clar√©"
    else
        log_warning "Encodage UTF-8 non d√©clar√©"
    fi
    
    # V√©rifier les imports FastMCP
    if grep -q "from mcp.server.fastmcp import" src/supabase_server.py; then
        log_success "Imports FastMCP corrects"
    else
        log_error "Imports FastMCP manquants"
    fi
    
    # V√©rifier le d√©corateur Smithery
    if grep -q "@smithery.server" src/supabase_server.py; then
        log_success "D√©corateur Smithery pr√©sent"
    else
        log_error "D√©corateur Smithery manquant"
    fi
else
    log_error "Fichier supabase_server.py non trouv√©"
    exit 1
fi

# Test 3: Build Smithery
log "üî® Test 3: Build Smithery..."
if npx smithery build; then
    log_success "Build Smithery r√©ussi"
else
    log_error "Build Smithery √©chou√©"
    exit 1
fi

# Test 4: V√©rification des outils MCP
log "üõ†Ô∏è Test 4: V√©rification des outils MCP..."
if grep -q "def ping(" src/supabase_server.py; then
    log_success "Outil ping pr√©sent"
else
    log_error "Outil ping manquant"
fi

if grep -q "def get_server_info(" src/supabase_server.py; then
    log_success "Outil get_server_info pr√©sent"
else
    log_error "Outil get_server_info manquant"
fi

if grep -q "def get_capabilities(" src/supabase_server.py; then
    log_success "Outil get_capabilities pr√©sent"
else
    log_error "Outil get_capabilities manquant"
fi

if grep -q "def execute_sql(" src/supabase_server.py; then
    log_success "Outil execute_sql pr√©sent"
else
    log_error "Outil execute_sql manquant"
fi

# Test 5: V√©rification du mode simulation
log "üé≠ Test 5: V√©rification du mode simulation..."
if grep -q "Mode simulation activ√©" src/supabase_server.py; then
    log_success "Mode simulation impl√©ment√©"
else
    log_warning "Mode simulation non impl√©ment√©"
fi

# Test 6: V√©rification des scripts d'automatisation
log "ü§ñ Test 6: V√©rification des scripts d'automatisation..."
scripts=("auto-deploy-complete.sh" "setup-railway.sh" "monitor-changes.sh" "demo-automation.sh")

for script in "${scripts[@]}"; do
    if [ -f "scripts/$script" ]; then
        if [ -x "scripts/$script" ]; then
            log_success "Script $script pr√©sent et ex√©cutable"
        else
            log_warning "Script $script pr√©sent mais non ex√©cutable"
        fi
    else
        log_error "Script $script manquant"
    fi
done

# Test 7: V√©rification de la configuration
log "‚öôÔ∏è Test 7: V√©rification de la configuration..."
if [ -f "pyproject.toml" ]; then
    log_success "pyproject.toml pr√©sent"
    
    if grep -q "\[tool.smithery\]" pyproject.toml; then
        log_success "Configuration Smithery pr√©sente"
    else
        log_error "Configuration Smithery manquante"
    fi
else
    log_error "pyproject.toml manquant"
fi

# Test 8: V√©rification des fichiers de configuration
log "üìÅ Test 8: V√©rification des fichiers de configuration..."
config_files=("railway-config.env" "railway.toml" "render.yaml")

for config_file in "${config_files[@]}"; do
    if [ -f "$config_file" ]; then
        log_success "Fichier $config_file pr√©sent"
    else
        log_warning "Fichier $config_file manquant"
    fi
done

echo ""
log_success "üéâ Tous les tests sont pass√©s !"
echo ""
echo "üìã R√©sum√© des tests:"
echo "‚úÖ Pr√©requis v√©rifi√©s"
echo "‚úÖ Syntaxe Python valide"
echo "‚úÖ Build Smithery r√©ussi"
echo "‚úÖ Outils MCP pr√©sents"
echo "‚úÖ Mode simulation impl√©ment√©"
echo "‚úÖ Scripts d'automatisation pr√©sents"
echo "‚úÖ Configuration correcte"
echo "‚úÖ Fichiers de configuration pr√©sents"
echo ""
echo "üöÄ Le syst√®me est pr√™t pour l'automatisation !"
echo ""
echo "üí° Prochaines √©tapes:"
echo "1. Configurer Railway: bash scripts/setup-railway.sh"
echo "2. Tester avec Railway: bash scripts/auto-deploy-complete.sh test"
echo "3. D√©marrer la surveillance: bash scripts/monitor-changes.sh start"
